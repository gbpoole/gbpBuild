# Makefile for Python code

# Set default mode
ifndef mode
    mode=release
endif

BUILD_DIR:="python/build"

$(BUILD_DIR):
ifneq (,$(wildcard $@))
	@$(ECHO) "test1"$(BUILD_DIR)
	@$(ECHO) -n "Making pythonbuild directory {"$@"}..."
	@mkdir $@
	@$(ECHO) "Done."
endif

.PHONY: build-py 
build-py: $(BUILD_DIR)
	@$(ECHO) "Building python package..."
	@cd python;python setup.py build
	@$(ECHO) "Done."

.PHONY: docs-py
docs-py:  $(BUILD_DIR)
	@$(ECHO) "Generating documentation for python package..."
	@cd python;python setup.py build_sphinx -c $(PRJ_DIR)/docs -s $(PRJ_DIR)/python/build/sphinx/
	@$(ECHO) "Done."

.PHONY: install-py
install-py: build-py
	@$(ECHO) "Installing python package..."
ifeq ($(mode),release)
	@cd python;python setup.py install
else ifeq ($(mode),develop)
	@cd python;python setup.py install develop
else
    $(error Invalid python build mode {$(mode)} specified for installation.)
endif
	@$(ECHO) "Done."

.PHONY: test-py
test-py: 
	@$(ECHO) "Running tests for python package..."
	@cd python;python setup.py test
ifeq ($(shell which tox),)
	@$(warning 'tox' not in path.  Please (re)install and try command again if you want it's support.)
else
	@cd python/$(shell basename $(realpath -s $(basename $@)));tox
endif
	@$(ECHO) "Done."

.PHONY: coverage-py
coverage-py: 
	@$(ECHO) "Generating Python test coverage report..."
ifeq ($(shell which tox),)
	@$(error 'coverage' not in path.  Please (re)install coverage.py and try command again if you want it's support.)
else
	@cd python/$(shell basename $(realpath -s $(basename $@)));coverage run setup.py test
	@cd python/$(shell basename $(realpath -s $(basename $@)));coverage report -m
	@cd python/$(shell basename $(realpath -s $(basename $@)));coverage html
endif
	@$(ECHO) "Done."

.PHONY: clean-py
clean-py: 
	@$(ECHO) -n "Cleaning-up python package..."
	@cd python;rm -rf build/
	@cd python;rm -rf dist/
	@cd python;rm -rf *.egg-info
	@cd python;rm -rf .tox/
	@cd python;rm -f .coverage
	@cd python;rm -rf htmlcov/
	@cd python;find . -name '*.pyc' -exec rm -f {} +
	@cd python;find . -name '*.pyo' -exec rm -f {} +
	@cd python;find . -name '*~' -exec rm -f {} +
	@cd python;find . -name '__pycache__' -exec rm -fr {} +
	@$(ECHO) "Done."

.PHONY: lint-py
lint-py: 
	@$(ECHO) -n "Linting python package..."
ifeq ($(shell which flake8),)
	@$(error 'flake8' not in path.  Please (re)install and try command again.)
else
	@cd python/$(shell basename $(realpath -s $(basename $@)));flake8 --exclude=.tox
endif
	@$(ECHO) "Done."
