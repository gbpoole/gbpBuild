#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# %project_name% documentation build configuration file
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute

import os
import sys

from datetime import datetime

# Set the project root directory
project_root_dir = os.path.abspath(os.path.normpath(os.path.join(os.path.dirname(__file__),'../../')))

# Add gbpBuild python code to path and import it
sys.path.append(os.path.abspath(os.path.join(project_root_dir,"%gbpbuild_rel_path%/python/gbpbuild")))
import gbpbuild.docs as docs
import gbpbuild.project as prj

# Parse the project directory to learn what we need about the project
# TODO: Can't parse directives with :'s .'s etc due to regex definition
# TODO: populate project .gbpBuild file with parameters dictionary
# TODO: add list of python modules and executables to project object
# TODO: add python modules and scripts to the path
# TODO: create docs.generate_python_rst
# TODO: add python.rst to index.rst (template insert?)
# TODO: rename docs.generate_API_rst -> docs.generate_C_API_rst etc
# TODO: add a requirements.txt file to template
# TODO: add an init target to Makefile; load modules and pip install requirements.txt
gbpBuild_project = prj.project("%project_name%",project_root_dir,"@Sphinx_BUILD_DIR@")

# Generate project .rst files
docs.generate_index_rst(gbpBuild_project)
if(gbpBuild_project.is_C_project):
    docs.generate_API_rst(gbpBuild_project)
    docs.generate_execs_rst(gbpBuild_project)
#if(gbpBuild_project.is_Python_project):
#    docs.generate_python_rst(gbpBuild_project)

# Add it to the project path
breathe_directory = "%s/breathe/"%(gbpBuild_project.dir_docs_build)
sys.path.append( breathe_directory )

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.ifconfig',
    'sphinx.ext.viewcode',
    'breathe']

# Some things that Breathe needs
breathe_projects        = { gbpBuild_project.name: "%s/doxygen/xml/"%(gbpBuild_project.dir_docs_build) }
breathe_default_project =   gbpBuild_project.name

# Add any paths that contain templates here, relative to this directory.
templates_path = ['%s/templates'%(gbpBuild_project.dir_docs)]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the gbpBuild_project.
project = gbpBuild_project.name
year = datetime.today().year
copyright = str(year)+', %s'%(gbpBuild_project.author)
author = gbpBuild_project.author

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.

# Extract version from .version file.
# n.b.: 'version' should be the short X.Y version
#       'release' should be the full version, including alpha/beta/rc tags
version = gbpBuild_project.version
release = gbpBuild_project.release

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['build-*','**/extern']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme_path =['%s/themes'%(gbpBuild_project.dir_docs)]
html_theme = 'gbp_theme'
html_show_sourcelink = False
html_favicon = '%s/static/favicon.ico'%(gbpBuild_project.dir_docs)
html_logo = '%s/static/logo.gif'%(gbpBuild_project.dir_docs)

html_sidebars = { '**': ['globaltoc.html', 'relations.html', 'sourcelink.html', 'searchbox.html'], }

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
html_theme_options = {'gbp_project_name':gbpBuild_project.name}

extra_nav_links = {'Index' : 'genindex.html'}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['%s/static'%(gbpBuild_project.dir_docs)]

# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = '%sdoc'%(gbpBuild_project.dir_docs)

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, '%s.tex'%(gbpBuild_project.name), '%s Documentation'%(gbpBuild_project.name),
     gbpBuild_project.author, 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, gbpBuild_project.name.lower(), '%s Documentation'%(gbpBuild_project.name),
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, gbpBuild_project.name, '%s Documentation'%(gbpBuild_project.name),
     author, gbpBuild_project.name, gbpBuild_project.description,
     'Miscellaneous'),
]

