#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# %project_name% documentation build configuration file
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute

import os
import shutil
import sys

from datetime import datetime
from recommonmark.parser import CommonMarkParser

# Set the project root directory
project_root_dir = os.path.abspath(os.path.normpath(os.path.join(os.path.dirname(__file__),'../')))

# Add the project python directory to the path
sys.path.append(os.path.abspath(os.path.normpath(project_root_dir,'/python')))
import docs.project as prj

# Parse the project directory to learn what we need about the project
this_project = prj.project(project_root_dir,"@Sphinx_BUILD_DIR@")

# Add project python directory so that autodoc can find it
sys.path.append(this_project.dir_python)
sys.path.append(this_project.dir_python_bin)

# Make sure the build directory exists
os.makedirs(this_project.dir_docs_build_src,exist_ok=True)

# Copy project .rst files to build directory
filenames = os.listdir(this_project.dir_docs)
for filename in filenames:
    if filename.endswith(".rst") or filename.endswith(".md"):
        shutil.copy2(os.path.abspath(os.path.join(this_project.dir_docs,filename)),os.path.join(this_project.dir_docs_build_src,filename)) 

# Auto-generate C &/or Python API, executable and index .rst files
build.generate_project_rsts(this_project)

# Add it to the project path
breathe_directory = "%s/breathe/"%(this_project.dir_docs_build)
sys.path.append( breathe_directory )

# -- General configuration ------------------------------------------------

# Set minimal Sphinx version
needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.ifconfig',
    'sphinx.ext.viewcode',
    'breathe']

# Some things that Breathe needs
breathe_projects        = { this_project.name: "%s/doxygen/xml/"%(this_project.dir_docs_build) }
breathe_default_project =   this_project.name

# Add any paths that contain templates here, relative to this directory.
templates_path = ['%s/templates'%(this_project.dir_docs)]

# Add a markdown parser
source_parsers = {
    '.md': CommonMarkParser,
}

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
source_suffix = ['.rst', '.md']

# The master toctree document.
master_doc = 'index'

# Exclude the source files in the docs directory
# (we've copied them to the build directory and 
#  dont want to double count them.)
#exclude_patterns = '*.rst'

# General information about the this_project.
project = this_project.name
year = datetime.today().year
copyright = str(year)+', %s'%(this_project.author)
author = this_project.author

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.

# Extract version from .version file.
# n.b.: 'version' should be the short X.Y version
#       'release' should be the full version, including alpha/beta/rc tags
version = this_project.version
release = this_project.release

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['build-*','**/extern']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme_path =['%s/themes'%(this_project.dir_docs)]
html_theme = 'gbp_theme'
html_show_sourcelink = False
html_favicon = '%s/static/favicon.ico'%(this_project.dir_docs)
html_logo = '%s/static/logo.gif'%(this_project.dir_docs)

html_sidebars = { '**': ['globaltoc.html', 'relations.html', 'sourcelink.html', 'searchbox.html'], }

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
html_theme_options = {'gbp_project_name':this_project.name}

extra_nav_links = {'Index' : 'genindex.html'}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['%s/static'%(this_project.dir_docs)]

# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = '%sdoc'%(this_project.dir_docs)

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, '%s.tex'%(this_project.name), '%s Documentation'%(this_project.name),
     this_project.author, 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, this_project.name.lower(), '%s Documentation'%(this_project.name),
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, this_project.name, '%s Documentation'%(this_project.name),
     author, this_project.name, this_project.description,
     'Miscellaneous'),
]
