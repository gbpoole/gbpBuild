import os
import sys

class project:
    def __init__(self,dir_root,dir_docs_build):

        self.name = "%project_name%"
        self.author = "%project_author%"
        self.description = "%project_description%"

        # Set some project direcories
        self.dir_root       = os.path.abspath(dir_root)
        self.dir_docs       = os.path.abspath(os.path.join(self.dir_root,"docs"))
        self.dir_python     = os.path.abspath(os.path.join(self.dir_root,"python"))
        self.dir_python_bin = os.path.abspath(os.path.join(self.dir_root,"python"))
        self.dir_python_pkg = os.path.abspath(os.path.normpath(os.path.join(os.path.dirname(__file__),'../python/%project_name%/')))

        # Check if this is a C-project (CMakeList.txt will exist if so)
        if(os.path.isfile(os.path.join(self.dir_root,"CMakeLists.txt"))):
            self.is_C_project = True
        else:
            self.is_C_project = False

        # Check if this is a Python-project (the python directory will exist if so)
        if(os.path.isdir(self.dir_python)):
            self.is_Python_project = True
        else:
            self.is_Python_project = False

        # If dir_docs_build is of the format "@...@" then it is *not*
        # being called from cmake ... so assume we are doing a python
        # build.  Otherwise, cmake has performed a variable substitution
        # (see support/cmake/FindSphinx.cmake) and we just use that.
        if(dir_docs_build!=dir_docs_build.strip('@')):
            self.dir_docs_build = os.path.join(self.dir_root,"docs/build")
        else:
            self.dir_docs_build = dir_docs_build
        self.dir_docs_build_src = os.path.join(self.dir_docs_build,'src')

        # Extract version & release from .version file.
        try:
            with open("%s/.version"%(self.dir_root),"r") as fp_in:
                self.version = str(fp_in.readline())
        except:
            print("Project '.version' file not found.  Setting version='unset'")
            self.version='unset'
        self.release = self.version
