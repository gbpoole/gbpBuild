#!/usr/bin/env python3

# This executable updates the .rst documentation files for this project.
# It should be run before committing any changes that affect the API, etc.
# since Readthedocs will not run it before generating updated docs.

import sys
import os
import subprocess

# Set the project root directory
project_root_dir = os.path.abspath(os.path.normpath(os.path.join(os.path.dirname(__file__),'../')))
project_docs_dir = os.path.abspath(os.path.normpath(os.path.join(os.path.dirname(__file__),'../docs/')))
project_py_dir = os.path.abspath(os.path.normpath(os.path.join(os.path.dirname(__file__),'../python/')))
project_py_bin_dir = os.path.abspath(os.path.normpath(os.path.join(os.path.dirname(__file__),'../python/bin')))
project_py_prj_dir = os.path.abspath(os.path.normpath(os.path.join(os.path.dirname(__file__),'../python/gbpPy/')))

# Add gbpBuild python code to path and import it
sys.path.append(os.path.abspath(os.path.join(project_root_dir,"extern/gbpBuild/python/")))

# Add project python directory so that autodoc can find it
sys.path.append(project_py_dir)
sys.path.append(project_py_bin_dir)

import gbpbuild.docs as docs
import gbpbuild.project as prj

def main(argv=None):
    # Parse the project directory to learn what we need about the project
    gbpBuild_project = prj.project("gbpPy",project_root_dir,project_docs_dir)
    
    # Generate the main project .rst index file
    docs.generate_index_rst(gbpBuild_project)
    
    # Generate documenation for C code
    if(gbpBuild_project.is_C_project):
        # Generate C API documenation
        docs.generate_C_API_rst(gbpBuild_project)
    
        # Generate documenation for C executables.  Note
        # that the executables will be run with '-h' and
        # the output parsed to do this ... so the C executables
        # need to be built and in the path do do this.  Also,
        # all executables need to generate syntax information
        # in the Clara format with a '-h' option.
        docs.generate_C_execs_rst(gbpBuild_project)
    
    # Generate documenation for Python code
    if(gbpBuild_project.is_Python_project):
        # Run 'sphinx-apidoc' to auto-generate the Python submodule API documentation
        subprocess.check_call(["sphinx-apidoc","-o"+project_docs_dir,project_py_prj_dir,"-T","-e","-M","-f"])
    
        # Remove the unneeded 'gbpPy.rst' file generated by 'sphinx-apidoc'
        os.remove(os.path.join(project_docs_dir,"gbpPy.rst"))
    
        # Generate the .rst file that binds all the Python documentation together
        docs.generate_Python_API_rst(gbpBuild_project)
    
        # Generate documenation for any python executables that may be present
        # Note that all executables will be run with a '-h' option and the
        # output parsed to generate this information.
        docs.generate_Python_execs_rst(gbpBuild_project)

# Permit script execution
if __name__ == '__main__':
    status = main()
    sys.exit(status)
